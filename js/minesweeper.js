var board = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° Minesweeper
var rows = 8; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
var columns = 8; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á

var minesCount = 5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÉ‡∏ô‡πÄ‡∏Å‡∏° Minesweeper
var minesLocation = []; // ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£

var tilesClicked = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏®‡∏£)
var flagEnabled = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ò‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

var gameOver = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

window.onload = function() {
    startGame(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
function setMines(){
    let minesLeft = minesCount;
    while (minesLeft > 0){
        let r = Math.floor(Math.random() * rows);
        let c = Math.floor(Math.random() * columns);
        let id = r.toString() + "-" + c.toString();

        if(!minesLocation.includes(id))
        {
            minesLocation.push(id);
            minesLeft -= 1;
        }
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
function startGame() {
    document.getElementById("mines-count").innerHTML = minesCount;
    document.getElementById("flag-button").addEventListener("click", setFlag);
    setMines();

    //‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    for (let r = 0; r < rows; r++) {
        let row = []
        for (let c = 0; c < columns; c++){
            let tile = document.createElement("div");
            tile.id = r.toString() + "-" + c.toString();
            tile.addEventListener("click", clickTile);
            document.getElementById("board").append(tile);
            row.push(tile);
        }
        board.push(row);
    }

    console.log(board);
}

// ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ò‡∏á
function setFlag(){
    if(flagEnabled) {
        flagEnabled = false;
        document.getElementById("flag-button").style.backgroundColor = "lightgray";
    }
    else {
        flagEnabled = true;
        document.getElementById("flag-button").style.backgroundColor = "darkgray";
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á
function clickTile() {
    if (gameOver || this.classList.contains("tile-clicked")){
        return;
    }

    let tile = this;
    if (flagEnabled) {
        if(tile.innerText == ""){
            tile.innerText = "üö©";
        }
        else if (tile.innerHTML == "üö©"){
            tile.innerText = "";
        }
        return;
    }

    if(minesLocation.includes(tile.id)) {
        alert("GAME OVER");
        gameOver = true;
        revealMines();
        return;
    }

    let coords = tile.id.split("-");
    let r = parseInt(coords[0]);
    let c = parseInt(coords[1]);
    checkMine(r, c);

}

// ‡πÇ‡∏ä‡∏ß‡πå‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function revealMines() {
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < columns; c++) {
            let tile = board[r][c];
            if (minesLocation.includes(tile.id)) {
                tile.innerText = "üí£";
                tile.style.backgroundColor = "red";
            }
        }
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏®‡∏£
function checkMine(r, c) {
    if (r < 0 || r >= rows || c < 0 || c >= columns)
    {
        return;
    }
    if (board[r][c].classList.contains("tile-clicked")) {
        return;
    }

    board[r][c].classList.add("tile-clicked");

    let minesFound = 0;

    minesFound += checkTile(r-1, c-1);
    minesFound += checkTile(r-1, c);
    minesFound += checkTile(r-1, c+1);
    
    minesFound += checkTile(r, c-1);
    minesFound += checkTile(r, c+1);

    minesFound += checkTile(r+1, c-1);
    minesFound += checkTile(r+1, c);
    minesFound += checkTile(r+1, c+1);

    if (minesFound > 0) {
        board[r][c].innerText = minesFound;
        board[r][c].classList.add("x" + minesFound.toString());
    }
    else {
        checkMine(r-1, c-1);
        checkMine(r-1, c);
        checkMine(r-1, c+1);

        checkMine(r, c-1);
        checkMine(r, c+1);

        checkMine(r+1, c-1);
        checkMine(r+1, c);
        checkMine(r+1, c+1);
    }

    if(tilesClicked == rows * columns - minesCount){
        document.getElementById("mines-count").innerText = "Cleared";
        gameOver = true;
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
function checkTile(r, c) {
    if (r < 0 || r >= rows || c < 0 || c >= columns)
    {
        return 0;
    }
    if (minesLocation.includes(r.toString() + "-" + c.toString())){
        return 1;
    }
    return 0;
}
